# üè† DOCKER COMPOSE DESARROLLO LOCAL
# Para desarrollo en localhost (una sola m√°quina)
# ‚úÖ OPTIMIZADO: No requiere configuraci√≥n DNS especial

services:
  # üóÑÔ∏è POSTGRESQL - Base de datos principal
  postgres:
    build: ./servers/postgresQl
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - TZ=America/Mexico_City
    volumes:
      - ./servers/postgresQl/postgres_data:/var/lib/postgresql/data
      - ./servers/postgresQl/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - lan
    ports:
      - "${DB_PORT}:5432"

  # üìä PGADMIN - Administraci√≥n de base de datos (opcional)
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PG_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PG_PASSWORD}
    networks:
      - lan
    ports:
      - "${PG_PORT}:80"
    depends_on:
      - postgres
  
  # üóÇÔ∏è MINIO - Almacenamiento S3 compatible
  minio:
    image: minio/minio
    container_name: minio
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_REGION=${MINIO_REGION}
    volumes:
      - ./servers/minio/aws3DataMinio:/data
    networks:
      - lan
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_PANEL_PORT}:9001"
    command: server /data --console-address ":9001"

  # Inicializador de MinIO
  minio-init:
    image: alpine:latest
    container_name: minio-init
    depends_on:
      - minio
    environment:
      - MINIO_HOST=${IP_ADDRESS_MINIO}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET=${MINIO_BUCKET}
    volumes:
      - ./servers/minio/init-minio.sh:/init-minio.sh
    entrypoint: ["/bin/sh", "/init-minio.sh"]
    networks:
      - lan

  # üñ•Ô∏è BACKEND - API Node.js (SIN configuraci√≥n DNS especial)
  backend:
    build:
      context: ./backend/app
      dockerfile: dockerfile.appdev
    container_name: back
    restart: unless-stopped
    environment:
      - IP_ADDRESS_POSTGRESQL=postgres
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - IP_ADDRESS_MINIO=minio
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=${IP_ADDRESS_POSTGRESQL}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - MINIO_ENDPOINT=${IP_ADDRESS_MINIO}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET=${MINIO_BUCKET}
      - MINIO_VIDEO_DIR=${MINIO_VIDEO_DIR}
      - MINIO_COVERS_DIR=${MINIO_COVERS_DIR}
      - MINIO_SUBS_DIR=${MINIO_SUBS_DIR}
      - TEMP_PROCESSING_DIR=${TEMP_PROCESSING_DIR}
      - JWT_SECRET=${JWT_SECRET}
      - API_KEY=${API_KEY}
      - EMAIL=${EMAIL}
      - PASS_EMAIL=${PASS_EMAIL}
      - BACK_PORT=${BACK_PORT}
      - FRONT_URL_LOCAL=${FRONT_URL_LOCAL}
      - WHITE_LIST=${WHITE_LIST}
      # üé¨ Variables de procesamiento de video
      - VIDEO_PROCESSING_MODE=${VIDEO_PROCESSING_MODE}
      - VIDEO_QUALITY_PROFILE=${VIDEO_QUALITY_PROFILE}
    volumes:
      - ./backend/app:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - lan
    ports:
      - "${BACK_PORT}:3000"
    # üîß DNS para resolver dominios externos (TMDB)
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      - postgres
      - minio
  
  # üé® FRONTEND VITE - SERVICIO PRINCIPAL
  frontend:
    build:
      context: ./frontend/app
      dockerfile: dockerfile.frontend
      args:
        - NODE_ENV=development
        - SERVICE_TYPE=frontend
    container_name: front
    restart: unless-stopped
    environment:
      - VITE_API_KEY=${VITE_API_KEY}
      - VITE_FRONT_URL_LOCAL=${VITE_FRONT_URL_LOCAL}
      - VITE_MODE=${VITE_MODE}
      - VITE_HOST_LOCAL=${VITE_HOST_LOCAL}
      - VITE_CDN_URL=${VITE_CDN_URL}
      - VITE_TMDB_API_KEY=${VITE_TMDB_API_KEY}
      - VITE_HOST=0.0.0.0
      - VITE_PORT=8080
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=1000
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=true
    volumes:
      - ./frontend/app:/app
      - /app/node_modules
      - /app/dist
    networks:
      - lan
    ports:
      - "8080:8080"
    depends_on:
      - backend

  # üìö STORYBOOK - Librer√≠a de componentes
  storybook:
    build:
      context: ./frontend/app
      dockerfile: dockerfile.storybook
      args:
        - NODE_ENV=development
        - SERVICE_TYPE=storybook
    container_name: storybook
    restart: unless-stopped
    environment:
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=1000
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend/app:/app
      - /app/node_modules
      - /app/storybook-static
    networks:
      - lan
    ports:
      - "6006:6006"

  # üåê CDN - Servidor de contenido
  cdn1:
    build: 
      context: ./servers
      args:
        - TEMPLATE_FILE=./cdn/nginx.conf.template
    container_name: cdn1
    restart: unless-stopped
    environment:
      - NGINX_TRANSCODER1=${NGINX_IP_ADDRESS_TRANSCODER1}  # transcoder1
      - NGINX_TRANSCODER2=${NGINX_IP_ADDRESS_TRANSCODER2}  # transcoder2
    volumes:
      - ./servers/cdn/nginx_cache:/var/cache/nginx
      - ./servers/cdn/index.html:/nginx-1.26.3/html/index.html
    networks:
      - lan
    ports:
      - "8082:80"
    depends_on:
      - minio

  # üé¨ TRANSCODER SERVERS
  transcoder1:
    build: 
      context: ./servers
      args:
        - TEMPLATE_FILE=./transcoderServers/transcoder1/nginx.conf.template
    container_name: transcoder1
    restart: unless-stopped
    environment:
      - NGINX_MINIO_SERVER=${IP_ADDRESS_MINIO}:${MINIO_PORT}  # minio:9000
      - NGINX_MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - NGINX_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - NGINX_REGION=${MINIO_REGION}
      - NGINX_MINIO_BUCKET=${MINIO_BUCKET}
      - NGINX_MINIO_VIDEO_DIR=${MINIO_VIDEO_DIR}
      - NGINX_MINIO_COVERS_DIR=${MINIO_COVERS_DIR}
      - NGINX_MINIO_SUBS_DIR=${MINIO_SUBS_DIR}
    volumes:
      - ./servers/transcoderServers/transcoder1/nginx_cache:/var/cache/nginx
      - ./servers/transcoderServers/transcoder1/index.html:/nginx-1.26.3/html/index.html
    networks:
      - lan

  transcoder2:
    build: 
      context: ./servers
      args:
        - TEMPLATE_FILE=./transcoderServers/transcoder2/nginx.conf.template
    container_name: transcoder2
    restart: unless-stopped
    environment:
      - NGINX_MINIO_SERVER=${IP_ADDRESS_MINIO}:${MINIO_PORT}  # minio:9000
      - NGINX_MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - NGINX_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - NGINX_REGION=${MINIO_REGION}
      - NGINX_MINIO_BUCKET=${MINIO_BUCKET}
      - NGINX_MINIO_VIDEO_DIR=${MINIO_VIDEO_DIR}
      - NGINX_MINIO_COVERS_DIR=${MINIO_COVERS_DIR}
      - NGINX_MINIO_SUBS_DIR=${MINIO_SUBS_DIR}
    volumes:
      - ./servers/transcoderServers/transcoder2/nginx_cache:/var/cache/nginx
      - ./servers/transcoderServers/transcoder2/index.html:/nginx-1.26.3/html/index.html
    networks:
      - lan

# Red personalizada
networks:
  lan:
    driver: bridge